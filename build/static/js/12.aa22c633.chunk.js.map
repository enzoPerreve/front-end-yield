{"version":3,"sources":["config/index.ts","components/layout/Flex.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/Hero.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","styled","div","Wrapper","theme","colors","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","otherExchange","TranslateString","useI18n","liquidityUrlPathParts","externalLink","justifyContent","href","external","NoFeeTag","variant","outline","startIcon","ExchangeTag","exchange","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","isCommunityFarm","alignItems","mb","src","alt","width","height","flexDirection","flexWrap","useStake","pid","decimal","dispatch","useDispatch","useWallet","account","masterChefContract","useMasterchef","handleStake","useCallback","amount","a","stake","txHash","fetchFarmUserDataAsync","console","info","onStake","useUnstake","onUnstake","unstake","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","times","toString","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","onApprove","lpContract","approve","tx","useApprove","getContract","handleApprove","error","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","Title","Heading","attrs","as","secondary","Blurb","StyledHero","Hero","tokenMode","Container","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","RhinoPerBlock","poolWeight","pow","comparedTo","Page","exact","responsive"],"mappings":"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","file":"static/js/12.aa22c633.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(0.5)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 2\n\nexport const CAKE_POOL_PID = 0\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  otherExchange?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  otherExchange\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  let externalLink = isTokenOnly ?\n    `https://quickswap.exchange/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n    :\n    `https://quickswap.exchange/#/add/${liquidityUrlPathParts}`;\n  \n  if (otherExchange === 'PolyZap') {\n    externalLink = isTokenOnly ?\n    `https://polyzap.app/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n    :\n    `https://polyzap.app/#/add/${liquidityUrlPathParts}`;\n  }\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={\n          externalLink\n        }>\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on Matic Explorer')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst ExchangeTag = ({exchange}) => (\n  <Tag variant='secondary' outline >\n    {exchange}\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag, ExchangeTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag, ExchangeTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n  isCommunityFarm?: boolean\n  otherExchange?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n  isCommunityFarm,\n  otherExchange\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"flex-end\" flexWrap=\"wrap\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {otherExchange ? <ExchangeTag exchange={otherExchange} /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number, decimal=18) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account, decimal)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid, decimal],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimal: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account, decimal)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number, decimal: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account, decimal)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid, decimal],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimal: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account, decimal)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string, decimal: number) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n  decimal?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0, decimal = 18}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val, decimal)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string, decimal: number) => void\n  onDismiss?: () => void\n  tokenName?: string\n  decimal?: number\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', decimal}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val, decimal)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n  decimal?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP, decimal}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid, decimal)\n  const { onUnstake } = useUnstake(pid, decimal)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance, decimal)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} decimal={decimal}/>,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n  decimal?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, decimal}) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid, decimal)\n\n  const rawEarningsBalance = getBalanceNumber(earnings, decimal)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 12 ?\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size='sm'\n            variant='secondary'\n            marginBottom='15px'\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n          : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP, decimal } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} decimal={decimal} />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          RHINO\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} decimal={decimal}/>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'RHINO per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://quickswap.exchange/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n  rgba(255, 0, 0, 1) 0%,\n  rgba(255, 154, 0, 1) 10%,\n  rgba(208, 222, 33, 1) 20%,\n  rgba(79, 220, 74, 1) 30%,\n  rgba(63, 218, 216, 1) 40%,\n  rgba(47, 201, 226, 1) 50%,\n  rgba(28, 127, 238, 1) 60%,\n  rgba(95, 21, 242, 1) 70%,\n  rgba(186, 12, 248, 1) 80%,\n  rgba(251, 7, 217, 1) 90%,\n  rgba(255, 0, 0, 1) 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account}) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n\n    \n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    // if (farm.quoteTokenSymbol === QuoteToken.MATIC) {\n    //   return cakePrice.times(farm.lpTotalInQuoteToken)\n    // }\n    return farm.lpTotalInQuoteToken\n  }, [cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'RHINO'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {(farm.tokenSymbol === 'RHINO' || farm.tokenSymbol === 'MATIC' || farm.tokenSymbol === 'WMATIC') && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n        otherExchange={farm.otherExchange}\n      />\n      {!removed && (\n        <Flex justifyContent='space-between' alignItems='center'>\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly ?\n              `https://info.quickswap.exchange/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              :\n              `https://info.quickswap.exchange/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n          otherExchange={farm.otherExchange}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text } from '@pancakeswap-libs/uikit'\nimport Container from 'components/layout/Container'\nimport useI18n from 'hooks/useI18n'\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.secondary};\n  margin-bottom: 24px;\n`\n\nconst Blurb = styled(Text)`\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n`\n\nconst StyledHero = styled.div`\n  background-image: url('/images/egg/banner-bg.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  padding-bottom: 40px;\n  padding-top: 40px;\n  margin-bottom: 32px;\n`\nconst Hero = ({tokenMode}) => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledHero>\n      <Container>\n        <Title>{\n          tokenMode ?\n            TranslateString(10002, 'Stake tokens to earn RHINO')\n            :\n          TranslateString(320, 'Stake LP tokens to earn RHINO')\n        }</Title>\n        <Blurb>{TranslateString(10000, 'Deposit Fee will be used to buyback $RHINO')}</Blurb>\n      </Container>\n    </StyledHero>\n  )\n}\n\nexport default Hero\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd} from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Hero from './components/Hero'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.RhinoPerBlock || 1).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        // if (farm.quoteTokenSymbol === QuoteToken.WMATIC) {\n        //   totalValue = totalValue.times(bnbPrice);\n        // }\n\n        if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          totalValue = totalValue.times(cakePrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [account, cakePrice, ethereum, bnbPrice],\n  )\n\n  return (\n    <>\n    <Hero tokenMode={tokenMode}/>\n    <Page>\n      {/* <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {\n          tokenMode ?\n            TranslateString(10002, 'Stake tokens to earn RHINO')\n            :\n          TranslateString(320, 'Stake LP tokens to earn RHINO')\n        }\n      </Heading>\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(10000, 'Deposit Fee will be used to buyback RHINO')}\n      </Heading> */}\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive />\n      </Page>\n      </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}