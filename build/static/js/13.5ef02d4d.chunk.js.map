{"version":3,"sources":["hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","tokenAddress","setBalance","ethereum","getTokenBalance","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","token","getCakeAddress","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","eggPrice","usePriceCakeBusd","toNumber","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","addWatchJaguarToken","provider","window","request","method","type","options","symbol","image","size","mb","src","alt","width","height","toFixed","onClick","marginLeft","id","disabled","length","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","getContract","cakeABI","methods","call","supply","fetchTotalSupply","useTotalSupply","burnedBalance","balanceOf","bal","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","RhinoPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","useTheme","isDark","toggleTheme","dataSource","sourceType","screenName","chrome","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/13.5ef02d4d.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingRhino',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingRhino',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\nposition: relative;\noverflow: hidden;\nz-index: 2;\n\n&:before {\n  content: ' ';\n    display: block;\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n    opacity: 0.2;\n  background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n  }\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n`\n\nconst token = getCakeAddress();\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  const addWatchJaguarToken = useCallback(async () => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const provider = window.ethereum\n    if (provider) {\n      try {\n        // wasAdded is a boolean. Like any RPC method, an error may be thrown.\n        const wasAdded = await provider.request({\n          method: 'wallet_watchAsset',\n          params: {\n            type: 'ERC20',\n            options: {\n              address: token,\n              symbol: 'RHINO',\n              decimals: '18',\n              image: 'https://www.polyion.net/images/egg/3.png',\n            },\n          },\n        })\n\n        if (wasAdded) {\n          // console.log('Token was added')\n        }\n      } catch (error) {\n        // TODO: find a way to handle when the user rejects transaction or it fails\n      }\n    }\n  }, [])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'EGG to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'EGG in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          <Button onClick={addWatchJaguarToken} size=\"sm\" mb={2}>\n            + Add RHINO to <img style={{ marginLeft: 8 }} width={16} src=\"https://jaguarswap.com/images/tokens/metamask.png\" alt=\"metamask logo\" />\n          </Button>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting EGG')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  let RhinoPerBlock = 0;\n  if(farms && farms[0] && farms[0].RhinoPerBlock){\n    RhinoPerBlock = new BigNumber(farms[0].RhinoPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Egg Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New EGG/block')}</Text>\n          <Text bold fontSize=\"14px\">{RhinoPerBlock}</Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\nimport useTheme from '../../../hooks/useTheme'\n\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  const { isDark, toggleTheme, theme } = useTheme();\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'PolyionF'\n          }}\n          options={{\n            height: '300',\n            chrome: \"noheader, nofooter\",\n            width: \"400\",\n            theme: isDark ? 'dark' : 'light'\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport Timer from './components/Timer'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\n\nconst Hero = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n  position: relative;\n  z-index:2;\n  border-radius: 30px;\n  \n  &:before {\n    content: ' ';\n    display: block;\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n    opacity: 0.1;\n    background-image: url('/images/egg/3.png');\n    background-repeat: no-repeat;\n    background-position: top center;    \n    border-radius: 30px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    \n    padding-top: 0;\n    position: relative;\n    z-index: 2;\n    height: 165px;\n\n    &:before {\n      content: ' ';\n      display: block;\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      z-index: -1;\n      opacity: 0.65;\n      background-image: url('/images/egg/vaults-hero.png');\n    background-position: left center, right center;\n    background-repeat: no-repeat;\n    }\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\" >\n          {TranslateString(579, 'Yield Farming shas begun')}\n        </Heading> \n      {/* <Timer /> */}\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\">\n          {TranslateString(576, 'Polyion Finance')}\n        </Heading>\n        <Text>{TranslateString(578, 'Last generation yield farming based on polygon')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard/>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}