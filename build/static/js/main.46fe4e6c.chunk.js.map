{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","utils/translateTextHelpers.ts","hooks/useI18n.ts","state/hooks.ts","components/layout/Page.tsx","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","contexts/ThemeContext.tsx","state/actions.ts","hooks/useRefresh.ts","hooks/useTheme.ts","utils/multicall.ts","config/constants/types.ts","utils/addressHelpers.ts","config/constants/pools.ts","config/constants/contracts.ts","config/constants/farms.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","views/Vaults/components/Hero.tsx","views/Vaults/components/Title.tsx","views/Vaults/Vaults.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts","components/layout/Container.tsx","contexts/Localisation/translationsContext.ts"],"names":["fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","USDC","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","RhinoPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","decimalsCalls","rawEarnings","parsedEarnings","rows","_","c","row","zip","earnings","decimals","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","translation","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useFarmFromPid","useFarmUser","usePriceBnbBusd","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","value","i","val","WMATIC","CAKE","plus","Page","styled","Container","theme","mediaQueries","sm","lg","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","CACHE_KEY","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","localStorage","getItem","JSON","parse","setIsDark","prevState","setItem","stringify","dark","light","fastRefresh","useTheme","StyledThemeCopntext","abi","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","PoolCategory","getCakeAddress","addresses","cake","chainId","masterChef","mulltiCall","getWbnbAddress","weth","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","pools","137","56","97","usdc","wmatic","matic","risk","lpSymbol","decimal","contracts","nonBnbPools","poolsConfig","filter","p","stakingTokenName","BNB","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingRhino","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","setTranslations","storedLangCode","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","console","error","langObject","config","label","icon","href","items","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","Title","Heading","attrs","as","size","secondary","Blurb","Text","StyledHero","Hero","TranslateString","Block","md","Vaults","img","primary","mb","Home","lazy","Farms","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","path","exact","tokenMode","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions","defaultTranslationState"],"mappings":"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","file":"static/js/main.46fe4e6c.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBalanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      if(farmConfig.isTokenOnly){\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        \n        if(farmConfig.tokenSymbol === QuoteToken.USDC && farmConfig.quoteTokenSymbol === QuoteToken.USDC){\n          tokenPriceVsQuote = new BigNumber(1);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBalanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }\n      else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBalanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBalanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBalanceLP).div(new BigNumber(tokenBalanceLP)).times(new BigNumber(10).pow(tokenDecimals - quoteTokenDecimals));\n        }\n      }\n\n\n      const [info, totalAllocPoint, RhinoPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'RhinoPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.times(new BigNumber(10).pow(tokenDecimals - quoteTokenDecimals)).toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        RhinoPerBlock: new BigNumber(RhinoPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  });\n\n  // const decimalsCalls = farmsConfig.map((farm) => {\n  //   const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n  //   return {\n  //     address: lpContractAddress,\n  //     name: 'decimals'\n  //   }\n  // });\n\n  const rawTokenBalances = await multicall(erc20ABI, calls);\n  // const tokenDecimals = await multicall(erc20ABI, decimalsCalls);\n\n  // const zip = rows => rows[0].map((_, c) => rows.map(row => row[c]));\n\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  });\n  \n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingRhino',\n      params: [farm.pid, account],\n    }\n  })\n\n  const decimalsCalls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n    return {\n      address: lpContractAddress,\n      name: 'decimals'\n    }\n  });\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n\n  const tokenDecimals = await multicall(erc20ABI, decimalsCalls);\n\n  const zip = rows => rows[0].map((_, c) => rows.map(row => row[c]));\n\n  const parsedEarnings = zip([rawEarnings, tokenDecimals]).map(([earnings, decimals]) => {\n    // console.log(18 -decimals[0])\n    return new BigNumber(earnings).div(new BigNumber(10).pow(18 - decimals[0])).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 1 // WMATIC-USDC LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const pid = 0; // RHINO-USDC LP\n  const farm = useFarmFromPid(pid);\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n}\n\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const cakePrice = usePriceCakeBusd();\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n      if (farm.quoteTokenSymbol === QuoteToken.WMATIC) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      }\n      if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\n      }else{\n        val = (farm.lpTotalInQuoteToken);\n      }\n      value = value.plus(val);\n    }\n  }\n  return value;\n}","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'USDC' = 'USDC',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n  'WMATIC' = 'WMATIC',\n  'MATIC' = 'MATIC'\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  80001?: string\n  137: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  otherExchange?: string\n  risk: number\n  decimal: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.weth[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","export default {\n  cake: {\n    // Addresse Token\n    137: '0x63C5Bc1dBE2539C06Ee29E776fd35b47ba488a21'\n  },\n  masterChef: {\n    // Addresse Masterchef\n    137: '0xB5e0BA294a816a7e3da435dBAfa59ec5b242A980'\n  },\n  weth: {\n    137: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619'\n  },\n  lottery: {\n    56: '',\n    97: '',\n  },\n  lotteryNFT: {\n    56: '',\n    97: '',\n  },\n  mulltiCall: {\n    // Addresse multiCall\n    137: '0xb2EF91058fD4cF1aEAD4eC6e609335a1C36Ce363'\n  },\n  usdc: {\n    // Addresse usdc\n    137: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174'\n  },\n  wmatic: {\n    // Addresse wmatic\n    137: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270'\n  },\n  matic: {\n    // Addresse matic\n    137: '0x0000000000000000000000000000000000001010'\n  }\n}","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0,\n    risk: 5,\n    lpSymbol: 'RHINO-USDC LP',\n    decimal: 18,\n    lpAddresses: {\n      137: '0x89c4b65bcd26855fecc022be396db993dfaa8baa',\n    },\n    tokenSymbol: 'RHINO',\n    tokenAddresses: {\n      137: '0x63C5Bc1dBE2539C06Ee29E776fd35b47ba488a21',\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  },\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'RHINO-WMATIC LP',\n    decimal: 18,\n    lpAddresses: {\n      137: '0x0073f4587a2bc0dfedeb0ed88c38b91e42736588',\n    },\n    tokenSymbol: 'WMATIC',\n    tokenAddresses: {\n      137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    },\n    quoteTokenSymbol: QuoteToken.CAKE,\n    quoteTokenAdresses: contracts.cake,\n  },\n  {\n    pid: 2,\n    risk: 5,\n    // farm\n    isTokenOnly: true,\n    lpSymbol: 'WMATIC',\n    decimal: 18,\n    lpAddresses: {\n    // Addresse WMATIC-USDC LP\n      137: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827'\n    },\n    tokenSymbol: 'WMATIC',\n    tokenAddresses: {\n      137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270'\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  },\n]\n\nexport default farms\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingRhino('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  ZHCN,\n  ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      // console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then(r=>r.json())\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error(\"ERROR\");\n          console.error(e);\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Exchange',\n        href: 'https://quickswap.exchange/#/swap?outputCurrency=0x63802aF1f00eEA04Ab93b49B19581177bc5CA104',\n      },\n      {\n        label: 'Liquidity',\n        href: 'https://quickswap.exchange/#/pool',\n      },\n    ],\n  },\n  {\n    label: 'Farms',\n    icon: 'FarmIcon',\n    href: '/farms',\n  },\n  {\n    label: 'Pools',\n    icon: 'PoolIcon',\n    href: '/pools',\n  },\n  // {\n  //   label: 'Lottery',\n  //   icon: 'TicketIcon',\n  //   href: '/lottery',\n  // },\n  // {\n  //   label: 'NFT',\n  //   icon: 'NftIcon',\n  //   href: '/nft',\n  // },\n  {\n    label: 'Info',\n    icon: 'InfoIcon',\n    items: [\n      {\n        label: 'QuickSwap',\n        href: 'https://info.quickswap.exchange/token/0x63802aF1f00eEA04Ab93b49B19581177bc5CA104',\n      },\n      {\n        label: 'PolyChart',\n        href: 'https://app.polychart.io/explorer/polygon/0x51ed72c3b89a042385e53e4ee85fea18d210ff61',\n      }\n    ],\n  },\n  {\n    label: 'More',\n    icon: 'MoreIcon',\n    items: [\n      {\n        label: 'Github',\n        href: 'https://github.com/Polyion',\n      },\n      {\n        label: 'Docs',\n        href: 'https://polyion.gitbook.io/polyion-doc/',\n      },\n      {\n        label: 'Vfat-tool',\n        href: 'https://vfat.tools/polygon/polyion/',\n      }\n    ],\n  },\n  {\n    label: 'Audit by TechRate coming',\n    icon: 'AuditIcon',\n    href: 'https://techrate.org/',\n  },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n      links={config}\n      priceLink=\"https://info.quickswap.exchange/token/0x63802aF1f00eEA04Ab93b49B19581177bc5CA104\"\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text } from '@pancakeswap-libs/uikit'\nimport Container from 'components/layout/Container'\nimport useI18n from 'hooks/useI18n'\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.secondary};\n  margin-bottom: 24px;\n`\n\nconst Blurb = styled(Text)`\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n`\n\nconst StyledHero = styled.div`\n  background-image: url('/images/egg/banner-bg.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  padding-bottom: 40px;\n  padding-top: 40px;\n  margin-bottom: 32px;\n`\nconst Hero = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledHero>\n      <Container>\n        <Title>{TranslateString(500, 'Rhino Vaults')}</Title>\n        <Blurb>{TranslateString(502, 'Yield Auto-compounding, as powerful as a rhino')}</Blurb>\n      </Container>\n    </StyledHero>\n  )\n}\n\nexport default Hero\n","import styled from 'styled-components'\nimport { Heading } from '@pancakeswap-libs/uikit'\n\nconst Title = styled(Heading).attrs({ size: 'lg' })`\n  color: ${({ theme }) => theme.colors.secondary};\n  margin-bottom: 16px;\n`\n\nexport default Title\n","// @ts-nocheck\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Button, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport Container from 'components/layout/Container'\nimport Hero from './components/Hero'\nimport Title from './components/Title'\n\nconst Content = styled(Container)`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr minmax(auto, 436px);\n  }\n`\n\nconst Block = styled.div`\n  margin-bottom: 32px;\n`\n\nconst MainImage = styled.img`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n  }\n`\n\nconst MobileImage = styled.img`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 136px;\n  padding: 16px 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: none;\n  }\n`\n\nconst LiquidityLink = styled.a`\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst Vaults = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <>\n    <Hero />\n    <Page>\n      {/* <Content> */}\n        <div>\n          <Block>\n            <Title as=\"h2\">{TranslateString(999, 'Coming Soon to Polyion Finance.')}</Title>\n            <Text mb={3}>\n              {TranslateString(\n                504,\n                'New Unique Vaults on Polygon.',\n              )}\n            </Text>\n          </Block>\n        </div>\n      {/* </Content> */}\n      </Page>\n      </>\n  )\n}\n\nexport default Vaults\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\nimport Vaults from './views/Vaults'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\n// const Lottery = lazy(() => import('./views/Lottery'))\n// const Pools = lazy(() => import('./views/Pools'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/pools\">\n              <Farms tokenMode/>\n            </Route>\n            <Route path=\"/vaults\">\n             <Vaults />\n            </Route>\n            {/* <Route path=\"/lottery\"> */}\n            {/*  <Lottery /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/ifo\"> */}\n            {/*  <Ifos /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n      {/* <NftGlobalNotification /> */}\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n"],"sourceRoot":""}