{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { ethers } from 'ethers';\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods.approve(masterChefContract.options.address, ethers.constants.MaxUint256).send({\n    from: account\n  });\n};\nexport const stake = async (masterChefContract, pid, amount, account, decimal) => {\n  return masterChefContract.methods.deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(), \"0x0000000000000000000000000000000000000000\").send({\n    from: account\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods.deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()).send({\n    from: account\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods.deposit().send({\n    from: account,\n    value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const unstake = async (masterChefContract, pid, amount, account, decimal) => {\n  return masterChefContract.methods.withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()).send({\n    from: account\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods.emergencyWithdraw().send({\n      from: account\n    }).on('transactionHash', tx => {\n      return tx.transactionHash;\n    });\n  }\n\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods.emergencyWithdraw().send({\n      from: account\n    }).on('transactionHash', tx => {\n      return tx.transactionHash;\n    });\n  }\n\n  return sousChefContract.methods.withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()).send({\n    from: account\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods.emergencyWithdraw().send({\n    from: account\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods.deposit(pid, '0', \"0x0000000000000000000000000000000000000000\").send({\n    from: account\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods.deposit('0').send({\n    from: account\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods.deposit().send({\n    from: account,\n    value: new BigNumber(0)\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};","map":{"version":3,"sources":["/Users/florianc/Documents/PERSO/blockchain/Polyion/polyion-frontend-master/src/utils/callHelpers.ts"],"names":["BigNumber","ethers","approve","lpContract","masterChefContract","account","methods","options","address","constants","MaxUint256","send","from","stake","pid","amount","decimal","deposit","times","pow","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account, decimal) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(), \"0x0000000000000000000000000000000000000000\")\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account, decimal) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0', \"0x0000000000000000000000000000000000000000\")\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n"]},"metadata":{},"sourceType":"module"}