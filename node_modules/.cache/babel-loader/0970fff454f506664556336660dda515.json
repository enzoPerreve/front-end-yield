{"ast":null,"code":"import { Interface } from '@ethersproject/abi';\nimport { getWeb3 } from 'utils/web3';\nimport MultiCallAbi from 'config/abi/Multicall.json';\nimport { getMulticallAddress } from 'utils/addressHelpers';\n\nconst multicall = async (abi, calls) => {\n  const web3 = getWeb3();\n  const multi = new web3.eth.Contract(MultiCallAbi, getMulticallAddress());\n  const itf = new Interface(abi);\n  const calldata = calls.map(call => [call.address, itf.encodeFunctionData(call.name, call.params)]);\n  const {\n    returnData\n  } = await multi.methods.aggregate(calldata).call();\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call));\n  return res;\n};\n\nexport default multicall;","map":{"version":3,"sources":["/Users/florianc/Documents/PERSO/blockchain/Polyion/polyion-frontend-master/src/utils/multicall.ts"],"names":["Interface","getWeb3","MultiCallAbi","getMulticallAddress","multicall","abi","calls","web3","multi","eth","Contract","itf","calldata","map","call","address","encodeFunctionData","name","params","returnData","methods","aggregate","res","i","decodeFunctionResult"],"mappings":"AACA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,mBAAT,QAAoC,sBAApC;;AAQA,MAAMC,SAAS,GAAG,OAAOC,GAAP,EAAmBC,KAAnB,KAAqC;AACrD,QAAMC,IAAI,GAAGN,OAAO,EAApB;AACA,QAAMO,KAAK,GAAG,IAAID,IAAI,CAACE,GAAL,CAASC,QAAb,CAAuBR,YAAvB,EAA4DC,mBAAmB,EAA/E,CAAd;AACA,QAAMQ,GAAG,GAAG,IAAIX,SAAJ,CAAcK,GAAd,CAAZ;AAEA,QAAMO,QAAQ,GAAGN,KAAK,CAACO,GAAN,CAAWC,IAAD,IAAU,CAACA,IAAI,CAACC,OAAN,EAAeJ,GAAG,CAACK,kBAAJ,CAAuBF,IAAI,CAACG,IAA5B,EAAkCH,IAAI,CAACI,MAAvC,CAAf,CAApB,CAAjB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAiB,MAAMX,KAAK,CAACY,OAAN,CAAcC,SAAd,CAAwBT,QAAxB,EAAkCE,IAAlC,EAA7B;AACA,QAAMQ,GAAG,GAAGH,UAAU,CAACN,GAAX,CAAe,CAACC,IAAD,EAAOS,CAAP,KAAaZ,GAAG,CAACa,oBAAJ,CAAyBlB,KAAK,CAACiB,CAAD,CAAL,CAASN,IAAlC,EAAwCH,IAAxC,CAA5B,CAAZ;AAEA,SAAOQ,GAAP;AACD,CAVD;;AAYA,eAAelB,SAAf","sourcesContent":["import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address, itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n"]},"metadata":{},"sourceType":"module"}