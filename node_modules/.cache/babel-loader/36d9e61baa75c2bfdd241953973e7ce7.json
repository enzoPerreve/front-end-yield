{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions';\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers';\nimport { useMasterchef, useSousChef } from './useContract';\n\nconst useUnstake = (pid, decimal) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleUnstake = useCallback(async amount => {\n    const txHash = await unstake(masterChefContract, pid, amount, account, decimal);\n    dispatch(fetchFarmUserDataAsync(account));\n    console.info(txHash);\n  }, [account, dispatch, masterChefContract, pid, decimal]);\n  return {\n    onUnstake: handleUnstake\n  };\n};\n\n_s(useUnstake, \"zJOfsUBwQjUSBQmKcK0zWz87/wI=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23];\nexport const useSousUnstake = sousId => {\n  _s2();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const sousChefContract = useSousChef(sousId);\n  const isOldSyrup = SYRUPIDS.includes(sousId);\n  const handleUnstake = useCallback(async (amount, decimal) => {\n    if (sousId === 0) {\n      const txHash = await unstake(masterChefContract, 0, amount, account, decimal);\n      console.info(txHash);\n    } else if (isOldSyrup) {\n      const txHash = await sousEmegencyUnstake(sousChefContract, amount, account);\n      console.info(txHash);\n    } else {\n      const txHash = await sousUnstake(sousChefContract, amount, account);\n      console.info(txHash);\n    }\n\n    dispatch(updateUserStakedBalance(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n    dispatch(updateUserPendingReward(sousId, account));\n  }, [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId]);\n  return {\n    onUnstake: handleUnstake\n  };\n};\n\n_s2(useSousUnstake, \"/h5ZFjuO6oTkFAGCCGKqpSiwlYo=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef, useSousChef];\n});\n\nexport default useUnstake;","map":{"version":3,"sources":["/Users/florianc/Documents/PERSO/blockchain/PolyRhino/polyrhino-frontend-master/src/hooks/useUnstake.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","updateUserStakedBalance","updateUserBalance","updateUserPendingReward","unstake","sousUnstake","sousEmegencyUnstake","useMasterchef","useSousChef","useUnstake","pid","decimal","dispatch","account","masterChefContract","handleUnstake","amount","txHash","console","info","onUnstake","SYRUPIDS","useSousUnstake","sousId","sousChefContract","isOldSyrup","includes"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SACEC,sBADF,EAEEC,uBAFF,EAGEC,iBAHF,EAIEC,uBAJF,QAKO,eALP;AAMA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,mBAA/B,QAA0D,mBAA1D;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,eAA3C;;AAEA,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAcC,OAAd,KAAkC;AAAA;;AACnD,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAcf,SAAS,EAA7B;AACA,QAAMgB,kBAAkB,GAAGP,aAAa,EAAxC;AAEA,QAAMQ,aAAa,GAAGlB,WAAW,CAC/B,MAAOmB,MAAP,IAA0B;AACxB,UAAMC,MAAM,GAAG,MAAMb,OAAO,CAACU,kBAAD,EAAqBJ,GAArB,EAA0BM,MAA1B,EAAkCH,OAAlC,EAA2CF,OAA3C,CAA5B;AACAC,IAAAA,QAAQ,CAACZ,sBAAsB,CAACa,OAAD,CAAvB,CAAR;AACAK,IAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD,GAL8B,EAM/B,CAACJ,OAAD,EAAUD,QAAV,EAAoBE,kBAApB,EAAwCJ,GAAxC,EAA6CC,OAA7C,CAN+B,CAAjC;AASA,SAAO;AAAES,IAAAA,SAAS,EAAEL;AAAb,GAAP;AACD,CAfD;;GAAMN,U;UACaV,W,EACGD,S,EACOS,a;;;AAc7B,MAAMc,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,CAAjB;AAEA,OAAO,MAAMC,cAAc,GAAIC,MAAD,IAAY;AAAA;;AACxC,QAAMX,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAcf,SAAS,EAA7B;AACA,QAAMgB,kBAAkB,GAAGP,aAAa,EAAxC;AACA,QAAMiB,gBAAgB,GAAGhB,WAAW,CAACe,MAAD,CAApC;AACA,QAAME,UAAU,GAAGJ,QAAQ,CAACK,QAAT,CAAkBH,MAAlB,CAAnB;AAEA,QAAMR,aAAa,GAAGlB,WAAW,CAC/B,OAAOmB,MAAP,EAAuBL,OAAvB,KAA2C;AACzC,QAAIY,MAAM,KAAK,CAAf,EAAkB;AAChB,YAAMN,MAAM,GAAG,MAAMb,OAAO,CAACU,kBAAD,EAAqB,CAArB,EAAwBE,MAAxB,EAAgCH,OAAhC,EAAyCF,OAAzC,CAA5B;AACAO,MAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD,KAHD,MAGO,IAAIQ,UAAJ,EAAgB;AACrB,YAAMR,MAAM,GAAG,MAAMX,mBAAmB,CAACkB,gBAAD,EAAmBR,MAAnB,EAA2BH,OAA3B,CAAxC;AACAK,MAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD,KAHM,MAGA;AACL,YAAMA,MAAM,GAAG,MAAMZ,WAAW,CAACmB,gBAAD,EAAmBR,MAAnB,EAA2BH,OAA3B,CAAhC;AACAK,MAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD;;AACDL,IAAAA,QAAQ,CAACX,uBAAuB,CAACsB,MAAD,EAASV,OAAT,CAAxB,CAAR;AACAD,IAAAA,QAAQ,CAACV,iBAAiB,CAACqB,MAAD,EAASV,OAAT,CAAlB,CAAR;AACAD,IAAAA,QAAQ,CAACT,uBAAuB,CAACoB,MAAD,EAASV,OAAT,CAAxB,CAAR;AACD,GAf8B,EAgB/B,CAACA,OAAD,EAAUD,QAAV,EAAoBa,UAApB,EAAgCX,kBAAhC,EAAoDU,gBAApD,EAAsED,MAAtE,CAhB+B,CAAjC;AAmBA,SAAO;AAAEH,IAAAA,SAAS,EAAEL;AAAb,GAAP;AACD,CA3BM;;IAAMO,c;UACMvB,W,EACGD,S,EACOS,a,EACFC,W;;;AAyB3B,eAAeC,UAAf","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number, decimal: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account, decimal)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid, decimal],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimal: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account, decimal)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n"]},"metadata":{},"sourceType":"module"}