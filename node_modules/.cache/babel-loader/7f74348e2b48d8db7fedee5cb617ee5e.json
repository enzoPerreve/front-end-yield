{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions';\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers';\nimport { useMasterchef, useSousChef } from './useContract';\n\nconst useStake = (pid, decimal = 18) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleStake = useCallback(async amount => {\n    const txHash = await stake(masterChefContract, pid, amount, account, decimal);\n    dispatch(fetchFarmUserDataAsync(account));\n    console.info(txHash);\n  }, [account, dispatch, masterChefContract, pid, decimal]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s(useStake, \"czMcmnP38Pb/7Q/GWJw52z/pz6w=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  _s2();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const sousChefContract = useSousChef(sousId);\n  const handleStake = useCallback(async (amount, decimal) => {\n    if (sousId === 0) {\n      await stake(masterChefContract, 0, amount, account, decimal);\n    } else if (isUsingBnb) {\n      await sousStakeBnb(sousChefContract, amount, account);\n    } else {\n      await sousStake(sousChefContract, amount, account);\n    }\n\n    dispatch(updateUserStakedBalance(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s2(useSousStake, \"0xUdHG0RnkeJZ8uhNJRSEh5OE7M=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef, useSousChef];\n});\n\nexport default useStake;","map":{"version":3,"sources":["/Users/florianc/Documents/PERSO/blockchain/Polyion/polyion-frontend-master/src/hooks/useStake.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","updateUserStakedBalance","updateUserBalance","stake","sousStake","sousStakeBnb","useMasterchef","useSousChef","useStake","pid","decimal","dispatch","account","masterChefContract","handleStake","amount","txHash","console","info","onStake","useSousStake","sousId","isUsingBnb","sousChefContract"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,sBAAT,EAAiCC,uBAAjC,EAA0DC,iBAA1D,QAAmF,eAAnF;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,YAA3B,QAA+C,mBAA/C;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,eAA3C;;AAEA,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAcC,OAAO,GAAC,EAAtB,KAA6B;AAAA;;AAC5C,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAcd,SAAS,EAA7B;AACA,QAAMe,kBAAkB,GAAGP,aAAa,EAAxC;AAEA,QAAMQ,WAAW,GAAGjB,WAAW,CAC7B,MAAOkB,MAAP,IAA0B;AACxB,UAAMC,MAAM,GAAG,MAAMb,KAAK,CAACU,kBAAD,EAAqBJ,GAArB,EAA0BM,MAA1B,EAAkCH,OAAlC,EAA2CF,OAA3C,CAA1B;AACAC,IAAAA,QAAQ,CAACX,sBAAsB,CAACY,OAAD,CAAvB,CAAR;AACAK,IAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD,GAL4B,EAM7B,CAACJ,OAAD,EAAUD,QAAV,EAAoBE,kBAApB,EAAwCJ,GAAxC,EAA6CC,OAA7C,CAN6B,CAA/B;AASA,SAAO;AAAES,IAAAA,OAAO,EAAEL;AAAX,GAAP;AACD,CAfD;;GAAMN,Q;UACaT,W,EACGD,S,EACOQ,a;;;AAc7B,OAAO,MAAMc,YAAY,GAAG,CAACC,MAAD,EAASC,UAAU,GAAG,KAAtB,KAAgC;AAAA;;AAC1D,QAAMX,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAcd,SAAS,EAA7B;AACA,QAAMe,kBAAkB,GAAGP,aAAa,EAAxC;AACA,QAAMiB,gBAAgB,GAAGhB,WAAW,CAACc,MAAD,CAApC;AAEA,QAAMP,WAAW,GAAGjB,WAAW,CAC7B,OAAOkB,MAAP,EAAuBL,OAAvB,KAA2C;AACzC,QAAIW,MAAM,KAAK,CAAf,EAAkB;AAChB,YAAMlB,KAAK,CAACU,kBAAD,EAAqB,CAArB,EAAwBE,MAAxB,EAAgCH,OAAhC,EAAyCF,OAAzC,CAAX;AACD,KAFD,MAEO,IAAIY,UAAJ,EAAgB;AACrB,YAAMjB,YAAY,CAACkB,gBAAD,EAAmBR,MAAnB,EAA2BH,OAA3B,CAAlB;AACD,KAFM,MAEA;AACL,YAAMR,SAAS,CAACmB,gBAAD,EAAmBR,MAAnB,EAA2BH,OAA3B,CAAf;AACD;;AACDD,IAAAA,QAAQ,CAACV,uBAAuB,CAACoB,MAAD,EAAST,OAAT,CAAxB,CAAR;AACAD,IAAAA,QAAQ,CAACT,iBAAiB,CAACmB,MAAD,EAAST,OAAT,CAAlB,CAAR;AACD,GAX4B,EAY7B,CAACA,OAAD,EAAUD,QAAV,EAAoBW,UAApB,EAAgCT,kBAAhC,EAAoDU,gBAApD,EAAsEF,MAAtE,CAZ6B,CAA/B;AAeA,SAAO;AAAEF,IAAAA,OAAO,EAAEL;AAAX,GAAP;AACD,CAtBM;;IAAMM,Y;UACMrB,W,EACGD,S,EACOQ,a,EACFC,W;;;AAoB3B,eAAeC,QAAf","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number, decimal=18) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account, decimal)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid, decimal],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimal: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account, decimal)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n"]},"metadata":{},"sourceType":"module"}