{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport erc20ABI from 'config/abi/erc20.json';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport multicall from 'utils/multicall';\nimport farmsConfig from 'config/constants/farms';\nimport { getMasterChefAddress } from 'utils/addressHelpers';\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\nexport const fetchFarmUserAllowances = async account => {\n  const masterChefAdress = getMasterChefAddress();\n  const calls = farmsConfig.map(farm => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n    return {\n      address: lpContractAddress,\n      name: 'allowance',\n      params: [account, masterChefAdress]\n    };\n  });\n  const rawLpAllowances = await multicall(erc20ABI, calls);\n  const parsedLpAllowances = rawLpAllowances.map(lpBalance => {\n    return new BigNumber(lpBalance).toJSON();\n  });\n  return parsedLpAllowances;\n};\nexport const fetchFarmUserTokenBalances = async account => {\n  const calls = farmsConfig.map(farm => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account]\n    };\n  }); // const decimalsCalls = farmsConfig.map((farm) => {\n  //   const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n  //   return {\n  //     address: lpContractAddress,\n  //     name: 'decimals'\n  //   }\n  // });\n\n  const rawTokenBalances = await multicall(erc20ABI, calls); // const tokenDecimals = await multicall(erc20ABI, decimalsCalls);\n  // const zip = rows => rows[0].map((_, c) => rows.map(row => row[c]));\n\n  const parsedTokenBalances = rawTokenBalances.map(tokenBalance => {\n    return new BigNumber(tokenBalance).toJSON();\n  });\n  return parsedTokenBalances;\n};\nexport const fetchFarmUserStakedBalances = async account => {\n  const masterChefAdress = getMasterChefAddress();\n  const calls = farmsConfig.map(farm => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account]\n    };\n  });\n  const rawStakedBalances = await multicall(masterchefABI, calls);\n  const parsedStakedBalances = rawStakedBalances.map(stakedBalance => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON();\n  });\n  return parsedStakedBalances;\n};\nexport const fetchFarmUserEarnings = async account => {\n  const masterChefAdress = getMasterChefAddress();\n  const calls = farmsConfig.map(farm => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingRhino',\n      params: [farm.pid, account]\n    };\n  });\n  const decimalsCalls = farmsConfig.map(farm => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n    return {\n      address: lpContractAddress,\n      name: 'decimals'\n    };\n  });\n  const rawEarnings = await multicall(masterchefABI, calls);\n  const tokenDecimals = await multicall(erc20ABI, decimalsCalls);\n\n  const zip = rows => rows[0].map((_, c) => rows.map(row => row[c]));\n\n  const parsedEarnings = zip([rawEarnings, tokenDecimals]).map(([earnings, decimals]) => {\n    // console.log(18 -decimals[0])\n    return new BigNumber(earnings).div(new BigNumber(10).pow(18 - decimals[0])).toJSON();\n  });\n  return parsedEarnings;\n};","map":{"version":3,"sources":["/Users/florianc/Documents/PERSO/blockchain/PolyRhino/polyrhino-frontend-master/src/state/farms/fetchFarmUser.ts"],"names":["BigNumber","erc20ABI","masterchefABI","multicall","farmsConfig","getMasterChefAddress","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchFarmUserAllowances","account","masterChefAdress","calls","map","farm","lpContractAddress","isTokenOnly","tokenAddresses","lpAddresses","address","name","params","rawLpAllowances","parsedLpAllowances","lpBalance","toJSON","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","pid","rawStakedBalances","parsedStakedBalances","stakedBalance","_hex","fetchFarmUserEarnings","decimalsCalls","rawEarnings","tokenDecimals","zip","rows","_","c","row","parsedEarnings","earnings","decimals","div","pow"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  });\n\n  // const decimalsCalls = farmsConfig.map((farm) => {\n  //   const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n  //   return {\n  //     address: lpContractAddress,\n  //     name: 'decimals'\n  //   }\n  // });\n\n  const rawTokenBalances = await multicall(erc20ABI, calls);\n  // const tokenDecimals = await multicall(erc20ABI, decimalsCalls);\n\n  // const zip = rows => rows[0].map((_, c) => rows.map(row => row[c]));\n\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  });\n  \n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingRhino',\n      params: [farm.pid, account],\n    }\n  })\n\n  const decimalsCalls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n    return {\n      address: lpContractAddress,\n      name: 'decimals'\n    }\n  });\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n\n  const tokenDecimals = await multicall(erc20ABI, decimalsCalls);\n\n  const zip = rows => rows[0].map((_, c) => rows.map(row => row[c]));\n\n  const parsedEarnings = zip([rawEarnings, tokenDecimals]).map(([earnings, decimals]) => {\n    // console.log(18 -decimals[0])\n    return new BigNumber(earnings).div(new BigNumber(10).pow(18 - decimals[0])).toJSON()\n  })\n  return parsedEarnings\n}\n"]},"metadata":{},"sourceType":"module"}