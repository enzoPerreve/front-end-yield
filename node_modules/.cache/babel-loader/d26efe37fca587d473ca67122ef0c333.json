{"ast":null,"code":"var _jsxFileName = \"/Users/florianc/Documents/PERSO/blockchain/Polyion/polyion-frontend-master/src/views/Farms/components/FarmCard/CardActionsContainer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { getContract } from 'utils/erc20';\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit';\nimport { useFarmFromPid, useFarmUser } from 'state/hooks';\nimport useI18n from 'hooks/useI18n';\nimport UnlockButton from 'components/UnlockButton';\nimport { useApprove } from 'hooks/useApprove';\nimport StakeAction from './StakeAction';\nimport HarvestAction from './HarvestAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Action = styled.div`\n  padding-top: 16px;\n`;\n_c = Action;\n\nconst CardActions = ({\n  farm,\n  ethereum,\n  account\n}) => {\n  _s();\n\n  const TranslateString = useI18n();\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    pid,\n    lpAddresses,\n    tokenAddresses,\n    isTokenOnly,\n    depositFeeBP,\n    decimal\n  } = useFarmFromPid(farm.pid);\n  const {\n    allowance,\n    tokenBalance,\n    stakedBalance,\n    earnings\n  } = useFarmUser(pid);\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID];\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase();\n  const isApproved = account && allowance && allowance.isGreaterThan(0);\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum, tokenAddress);\n    }\n\n    return getContract(ethereum, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly]);\n  const {\n    onApprove\n  } = useApprove(lpContract);\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true);\n      await onApprove();\n      setRequestedApproval(false);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [onApprove]);\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? /*#__PURE__*/_jsxDEV(StakeAction, {\n      stakedBalance: stakedBalance,\n      tokenBalance: tokenBalance,\n      tokenName: lpName,\n      pid: pid,\n      depositFeeBP: depositFeeBP,\n      decimal: decimal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Button, {\n      mt: \"8px\",\n      fullWidth: true,\n      disabled: requestedApproval,\n      onClick: handleApprove,\n      children: TranslateString(999, 'Approve Contract')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Action, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"secondary\",\n        fontSize: \"12px\",\n        pr: \"3px\",\n        children: \"TEL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        children: TranslateString(999, 'Earned')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HarvestAction, {\n      earnings: earnings,\n      pid: pid,\n      decimal: decimal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"secondary\",\n        fontSize: \"12px\",\n        pr: \"3px\",\n        children: lpName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        children: TranslateString(999, 'Staked')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), !account ? /*#__PURE__*/_jsxDEV(UnlockButton, {\n      mt: \"8px\",\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 19\n    }, this) : renderApprovalOrStakeButton()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardActions, \"R+t0Ne7LTTgA50uD5XUlo8v6IBA=\", false, function () {\n  return [useI18n, useFarmFromPid, useFarmUser, useApprove];\n});\n\n_c2 = CardActions;\nexport default CardActions;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Action\");\n$RefreshReg$(_c2, \"CardActions\");","map":{"version":3,"sources":["/Users/florianc/Documents/PERSO/blockchain/Polyion/polyion-frontend-master/src/views/Farms/components/FarmCard/CardActionsContainer.tsx"],"names":["React","useMemo","useState","useCallback","styled","getContract","Button","Flex","Text","useFarmFromPid","useFarmUser","useI18n","UnlockButton","useApprove","StakeAction","HarvestAction","Action","div","CardActions","farm","ethereum","account","TranslateString","requestedApproval","setRequestedApproval","pid","lpAddresses","tokenAddresses","isTokenOnly","depositFeeBP","decimal","allowance","tokenBalance","stakedBalance","earnings","lpAddress","process","env","REACT_APP_CHAIN_ID","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","lpContract","onApprove","handleApprove","e","console","error","renderApprovalOrStakeButton"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP, decimal } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} decimal={decimal} />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          TEL\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} decimal={decimal}/>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n"]},"metadata":{},"sourceType":"module"}