{"ast":null,"code":"var _jsxFileName = \"/Users/florianc/Documents/PERSO/blockchain/Polyion/polyion-frontend-master/src/views/Farms/Farms.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { Route, useRouteMatch } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { Image } from '@pancakeswap-libs/uikit';\nimport { BLOCKS_PER_YEAR } from 'config';\nimport FlexLayout from 'components/layout/Flex';\nimport Page from 'components/layout/Page';\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchFarmUserDataAsync } from 'state/actions';\nimport { QuoteToken } from 'config/constants/types';\nimport useI18n from 'hooks/useI18n';\nimport FarmCard from './components/FarmCard/FarmCard';\nimport Hero from './components/Hero';\nimport FarmTabButtons from './components/FarmTabButtons';\nimport Divider from './components/Divider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Farms = farmsProps => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const TranslateString = useI18n();\n  const farmsLP = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const bnbPrice = usePriceBnbBusd();\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const {\n    tokenMode\n  } = farmsProps;\n  const dispatch = useDispatch();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const [stakedOnly, setStakedOnly] = useState(false);\n  const activeFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X');\n  const inactiveFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X');\n  const stakedOnlyFarms = activeFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0)); // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n\n  const farmsList = useCallback((farmsToDisplay, removed) => {\n    // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n    const farmsToDisplayWithAPY = farmsToDisplay.map(farm => {\n      // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n      //   return farm\n      // }\n      const cakeRewardPerBlock = new BigNumber(farm.TelPerBlock || 1).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18));\n      const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR);\n      let apy = cakePrice.times(cakeRewardPerYear);\n      let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0); // if (farm.quoteTokenSymbol === QuoteToken.WMATIC) {\n      //   totalValue = totalValue.times(bnbPrice);\n      // }\n\n      if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        totalValue = totalValue.times(cakePrice);\n      }\n\n      if (totalValue.comparedTo(0) > 0) {\n        apy = apy.div(totalValue);\n      }\n\n      return { ...farm,\n        apy\n      };\n    });\n    return farmsToDisplayWithAPY.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n      farm: farm,\n      removed: removed,\n      bnbPrice: bnbPrice,\n      cakePrice: cakePrice,\n      ethereum: ethereum,\n      account: account\n    }, farm.pid, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this));\n  }, [account, cakePrice, ethereum, bnbPrice]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Hero, {\n      tokenMode: tokenMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Page, {\n      children: [/*#__PURE__*/_jsxDEV(FarmTabButtons, {\n        stakedOnly: stakedOnly,\n        setStakedOnly: setStakedOnly\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(FlexLayout, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: `${path}`,\n            children: stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: `${path}/history`,\n            children: farmsList(inactiveFarms, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Image, {\n        src: \"/images/egg/8.png\",\n        alt: \"illustration\",\n        width: 1352,\n        height: 587,\n        responsive: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Farms, \"U7j0Q/3y0k3JMsUX/Kmgi5RmzpA=\", false, function () {\n  return [useRouteMatch, useI18n, useFarms, usePriceCakeBusd, usePriceBnbBusd, useWallet, useDispatch, useRefresh];\n});\n\n_c = Farms;\nexport default Farms;\n\nvar _c;\n\n$RefreshReg$(_c, \"Farms\");","map":{"version":3,"sources":["/Users/florianc/Documents/PERSO/blockchain/Polyion/polyion-frontend-master/src/views/Farms/Farms.tsx"],"names":["React","useEffect","useCallback","useState","Route","useRouteMatch","useDispatch","BigNumber","useWallet","Image","BLOCKS_PER_YEAR","FlexLayout","Page","useFarms","usePriceBnbBusd","usePriceCakeBusd","useRefresh","fetchFarmUserDataAsync","QuoteToken","useI18n","FarmCard","Hero","FarmTabButtons","Divider","Farms","farmsProps","path","TranslateString","farmsLP","cakePrice","bnbPrice","account","ethereum","tokenMode","dispatch","fastRefresh","stakedOnly","setStakedOnly","activeFarms","filter","farm","isTokenOnly","multiplier","inactiveFarms","stakedOnlyFarms","userData","stakedBalance","isGreaterThan","farmsList","farmsToDisplay","removed","farmsToDisplayWithAPY","map","cakeRewardPerBlock","TelPerBlock","times","poolWeight","div","pow","cakeRewardPerYear","apy","totalValue","lpTotalInQuoteToken","quoteTokenSymbol","CAKE","comparedTo","pid"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,kBAArC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AAEA,SAASC,KAAT,QAA+B,yBAA/B;AACA,SAASC,eAAT,QAA+D,QAA/D;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,QAAT,EAAmBC,eAAnB,EAAoCC,gBAApC,QAA2D,aAA3D;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,sBAAT,QAAuC,eAAvC;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,QAAP,MAA8C,gCAA9C;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;;AAMA,MAAMC,KAA2B,GAAIC,UAAD,IAAgB;AAAA;;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAWrB,aAAa,EAA9B;AACA,QAAMsB,eAAe,GAAGR,OAAO,EAA/B;AACA,QAAMS,OAAO,GAAGf,QAAQ,EAAxB;AACA,QAAMgB,SAAS,GAAGd,gBAAgB,EAAlC;AACA,QAAMe,QAAQ,GAAGhB,eAAe,EAAhC;AACA,QAAM;AAAEiB,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAiExB,SAAS,EAAhF;AACA,QAAM;AAACyB,IAAAA;AAAD,MAAcR,UAApB;AAEA,QAAMS,QAAQ,GAAG5B,WAAW,EAA5B;AACA,QAAM;AAAE6B,IAAAA;AAAF,MAAkBnB,UAAU,EAAlC;AACAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI8B,OAAJ,EAAa;AACXG,MAAAA,QAAQ,CAACjB,sBAAsB,CAACc,OAAD,CAAvB,CAAR;AACD;AACF,GAJQ,EAIN,CAACA,OAAD,EAAUG,QAAV,EAAoBC,WAApB,CAJM,CAAT;AAMA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BlC,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAMmC,WAAW,GAAGV,OAAO,CAACW,MAAR,CAAgBC,IAAD,IAAU,CAAC,CAACA,IAAI,CAACC,WAAP,KAAuB,CAAC,CAACR,SAAzB,IAAsCO,IAAI,CAACE,UAAL,KAAoB,IAAnF,CAApB;AACA,QAAMC,aAAa,GAAGf,OAAO,CAACW,MAAR,CAAgBC,IAAD,IAAU,CAAC,CAACA,IAAI,CAACC,WAAP,KAAuB,CAAC,CAACR,SAAzB,IAAsCO,IAAI,CAACE,UAAL,KAAoB,IAAnF,CAAtB;AAEA,QAAME,eAAe,GAAGN,WAAW,CAACC,MAAZ,CACrBC,IAAD,IAAUA,IAAI,CAACK,QAAL,IAAiB,IAAItC,SAAJ,CAAciC,IAAI,CAACK,QAAL,CAAcC,aAA5B,EAA2CC,aAA3C,CAAyD,CAAzD,CADL,CAAxB,CAtBkD,CA0BlD;AACA;AACA;;AACA,QAAMC,SAAS,GAAG9C,WAAW,CAC3B,CAAC+C,cAAD,EAAiBC,OAAjB,KAAsC;AACpC;AACA,UAAMC,qBAA4C,GAAGF,cAAc,CAACG,GAAf,CAAoBZ,IAAD,IAAU;AAChF;AACA;AACA;AACA,YAAMa,kBAAkB,GAAG,IAAI9C,SAAJ,CAAciC,IAAI,CAACc,WAAL,IAAoB,CAAlC,EAAqCC,KAArC,CAA2C,IAAIhD,SAAJ,CAAciC,IAAI,CAACgB,UAAnB,CAA3C,EAA2EC,GAA3E,CAA+E,IAAIlD,SAAJ,CAAc,EAAd,EAAkBmD,GAAlB,CAAsB,EAAtB,CAA/E,CAA3B;AACA,YAAMC,iBAAiB,GAAGN,kBAAkB,CAACE,KAAnB,CAAyB7C,eAAzB,CAA1B;AAEA,UAAIkD,GAAG,GAAG/B,SAAS,CAAC0B,KAAV,CAAgBI,iBAAhB,CAAV;AAEA,UAAIE,UAAU,GAAG,IAAItD,SAAJ,CAAciC,IAAI,CAACsB,mBAAL,IAA4B,CAA1C,CAAjB,CATgF,CAWhF;AACA;AACA;;AAEA,UAAItB,IAAI,CAACuB,gBAAL,KAA0B7C,UAAU,CAAC8C,IAAzC,EAA+C;AAC7CH,QAAAA,UAAU,GAAGA,UAAU,CAACN,KAAX,CAAiB1B,SAAjB,CAAb;AACD;;AAED,UAAGgC,UAAU,CAACI,UAAX,CAAsB,CAAtB,IAA2B,CAA9B,EAAgC;AAC9BL,QAAAA,GAAG,GAAGA,GAAG,CAACH,GAAJ,CAAQI,UAAR,CAAN;AACD;;AAED,aAAO,EAAE,GAAGrB,IAAL;AAAWoB,QAAAA;AAAX,OAAP;AACD,KAxBoD,CAArD;AAyBA,WAAOT,qBAAqB,CAACC,GAAtB,CAA2BZ,IAAD,iBAC/B,QAAC,QAAD;AAEE,MAAA,IAAI,EAAEA,IAFR;AAGE,MAAA,OAAO,EAAEU,OAHX;AAIE,MAAA,QAAQ,EAAEpB,QAJZ;AAKE,MAAA,SAAS,EAAED,SALb;AAME,MAAA,QAAQ,EAAEG,QANZ;AAOE,MAAA,OAAO,EAAED;AAPX,OACOS,IAAI,CAAC0B,GADZ;AAAA;AAAA;AAAA;AAAA,YADK,CAAP;AAWD,GAvC0B,EAwC3B,CAACnC,OAAD,EAAUF,SAAV,EAAqBG,QAArB,EAA+BF,QAA/B,CAxC2B,CAA7B;AA2CA,sBACE;AAAA,4BACA,QAAC,IAAD;AAAM,MAAA,SAAS,EAAEG;AAAjB;AAAA;AAAA;AAAA;AAAA,YADA,eAEA,QAAC,IAAD;AAAA,8BAYE,QAAC,cAAD;AAAgB,QAAA,UAAU,EAAEG,UAA5B;AAAwC,QAAA,aAAa,EAAEC;AAAvD;AAAA;AAAA;AAAA;AAAA,cAZF,eAaE;AAAA,gCACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,UAAD;AAAA,kCACE,QAAC,KAAD;AAAO,YAAA,KAAK,MAAZ;AAAa,YAAA,IAAI,EAAG,GAAEX,IAAK,EAA3B;AAAA,sBACGU,UAAU,GAAGY,SAAS,CAACJ,eAAD,EAAkB,KAAlB,CAAZ,GAAuCI,SAAS,CAACV,WAAD,EAAc,KAAd;AAD7D;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,QAAC,KAAD;AAAO,YAAA,KAAK,MAAZ;AAAa,YAAA,IAAI,EAAG,GAAEZ,IAAK,UAA3B;AAAA,sBACGsB,SAAS,CAACL,aAAD,EAAgB,IAAhB;AADZ;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF,eAwBE,QAAC,KAAD;AAAO,QAAA,GAAG,EAAC,mBAAX;AAA+B,QAAA,GAAG,EAAC,cAAnC;AAAkD,QAAA,KAAK,EAAE,IAAzD;AAA+D,QAAA,MAAM,EAAE,GAAvE;AAA4E,QAAA,UAAU;AAAtF;AAAA;AAAA;AAAA;AAAA,cAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA,kBADF;AA+BD,CAvGD;;GAAMnB,K;UACanB,a,EACOc,O,EACRN,Q,EACEE,gB,EACDD,e,EACsDN,S,EAGtDF,W,EACOU,U;;;KAVpBQ,K;AAyGN,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd} from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Hero from './components/Hero'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.TelPerBlock || 1).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        // if (farm.quoteTokenSymbol === QuoteToken.WMATIC) {\n        //   totalValue = totalValue.times(bnbPrice);\n        // }\n\n        if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          totalValue = totalValue.times(cakePrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [account, cakePrice, ethereum, bnbPrice],\n  )\n\n  return (\n    <>\n    <Hero tokenMode={tokenMode}/>\n    <Page>\n      {/* <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {\n          tokenMode ?\n            TranslateString(10002, 'Stake tokens to earn TEL')\n            :\n          TranslateString(320, 'Stake LP tokens to earn TEL')\n        }\n      </Heading>\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(10000, 'Deposit Fee will be used to buyback TEL')}\n      </Heading> */}\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive />\n      </Page>\n      </>\n  )\n}\n\nexport default Farms\n"]},"metadata":{},"sourceType":"module"}